{"ast":null,"code":"import * as anchor from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\nimport { CIVIC, getAtaForMint, getNetworkExpire, getNetworkToken, SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from './utils';\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ');\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\nexport const awaitTransactionSignatureConfirmation = async function (txid, timeout, connection) {\n  let queryStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({\n        timeout: true\n      });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([txid]);\n          status = signatureStatuses && signatureStatuses.value[0];\n\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n\n      await sleep(2000);\n    }\n  }); //@ts-ignore\n\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress) => {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedTokenAddress,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: walletAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: splTokenMintAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: TOKEN_PROGRAM_ID,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([])\n  });\n};\n\nexport const getCandyMachineState = async (anchorWallet, candyMachineId, connection) => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent'\n  });\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const state = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const presale = state.data.whitelistMintSettings && state.data.whitelistMintSettings.presale && (!state.data.goLiveDate || state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: (presale || state.data.goLiveDate.toNumber() < new Date().getTime() / 1000) && (state.endSettings ? state.endSettings.endSettingType.date ? state.endSettings.number.toNumber() > new Date().getTime() / 1000 : itemsRedeemed < state.endSettings.number.toNumber() : true),\n      isPresale: presale,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price\n    }\n  };\n};\n\nconst getMasterEdition = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from('edition')], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nconst getMetadata = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nexport const getCandyMachineCreator = async candyMachine => {\n  return await anchor.web3.PublicKey.findProgramAddress([Buffer.from('candy_machine'), candyMachine.toBuffer()], CANDY_MACHINE_PROGRAM);\n};\nexport const mintOneToken = async (candyMachine, payer) => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (await getAtaForMint(mint.publicKey, payer))[0];\n  const userPayingAccountAddress = candyMachine.state.tokenMint ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0] : payer;\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers = [mint];\n  const cleanupInstructions = [];\n  const instructions = [anchor.web3.SystemProgram.createAccount({\n    fromPubkey: payer,\n    newAccountPubkey: mint.publicKey,\n    space: MintLayout.span,\n    lamports: await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(MintLayout.span),\n    programId: TOKEN_PROGRAM_ID\n  }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer), createAssociatedTokenAccountInstruction(userTokenAccountAddress, payer, payer, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccountAddress, payer, [], 1)];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (await getNetworkToken(payer, candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n      isWritable: true,\n      isSigner: false\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false\n      });\n      remainingAccounts.push({\n        pubkey: (await getNetworkExpire(candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n        isWritable: false,\n        isSigner: false\n      });\n    }\n  }\n\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(candyMachine.state.whitelistMintSettings.mint);\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists = await candyMachine.program.provider.connection.getAccountInfo(whitelistToken);\n\n      if (exists) {\n        instructions.push(Token.createApproveInstruction(TOKEN_PROGRAM_ID, whitelistToken, whitelistBurnAuthority.publicKey, payer, [], 1));\n        cleanupInstructions.push(Token.createRevokeInstruction(TOKEN_PROGRAM_ID, whitelistToken, payer, []));\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true\n    });\n    instructions.push(Token.createApproveInstruction(TOKEN_PROGRAM_ID, userPayingAccountAddress, transferAuthority.publicKey, payer, [], candyMachine.state.price.toNumber()));\n    cleanupInstructions.push(Token.createRevokeInstruction(TOKEN_PROGRAM_ID, userPayingAccountAddress, payer, []));\n  }\n\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(candyMachineAddress);\n  instructions.push(await candyMachine.program.instruction.mintNft(creatorBump, {\n    accounts: {\n      candyMachine: candyMachineAddress,\n      candyMachineCreator,\n      payer: payer,\n      wallet: candyMachine.state.treasury,\n      mint: mint.publicKey,\n      metadata: metadataAddress,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n      recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n      instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY\n    },\n    remainingAccounts: remainingAccounts.length > 0 ? remainingAccounts : undefined\n  }));\n\n  try {\n    return (await sendTransactions(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, [instructions, cleanupInstructions], [signers, []])).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\nexport const shortenAddress = function (address) {\n  let chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};","map":{"version":3,"sources":["/Users/shawn/metaplex/js/packages/candy-machine-ui/src/candy-machine.ts"],"names":["anchor","MintLayout","TOKEN_PROGRAM_ID","Token","SystemProgram","sendTransactions","CIVIC","getAtaForMint","getNetworkExpire","getNetworkToken","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CANDY_MACHINE_PROGRAM","web3","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","signatureStatuses","getSignatureStatuses","value","e","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","Provider","preflightCommitment","idl","Program","fetchIdl","program","state","account","candyMachine","fetch","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","presale","whitelistMintSettings","goLiveDate","Date","getTime","id","isSoldOut","isActive","endSettings","endSettingType","date","number","isPresale","treasury","wallet","tokenMint","gatekeeper","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","Keypair","generate","userTokenAccountAddress","publicKey","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","instructions","createAccount","fromPubkey","newAccountPubkey","space","span","lamports","getMinimumBalanceForRentExemption","createInitMintInstruction","createMintToInstruction","push","gatekeeperNetwork","expireOnUse","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","exists","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","txs","map","t","shortenAddress","address","chars","slice","ms"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,uBAAxB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,KAAvC,QAAoD,mBAApD;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,SACEC,KADF,EAEEC,aAFF,EAGEC,gBAHF,EAIEC,eAJF,EAKEC,uCALF,QAMO,SANP;AAQA,OAAO,MAAMC,qBAAqB,GAAG,IAAIX,MAAM,CAACY,IAAP,CAAYC,SAAhB,CACnC,6CADmC,CAA9B;AAIP,MAAMC,yBAAyB,GAAG,IAAId,MAAM,CAACY,IAAP,CAAYC,SAAhB,CAChC,6CADgC,CAAlC;AAuCA,OAAO,MAAME,qCAAqC,GAAG,gBACnDC,IADmD,EAEnDC,OAFmD,EAGnDC,UAHmD,EAKI;AAAA,MADvDC,WACuD,uEADzC,KACyC;AACvD,MAAIC,IAAI,GAAG,KAAX;AACA,MAAIC,MAAiD,GAAG;AACtDC,IAAAA,IAAI,EAAE,CADgD;AAEtDC,IAAAA,aAAa,EAAE,CAFuC;AAGtDC,IAAAA,GAAG,EAAE;AAHiD,GAAxD;AAKA,MAAIC,KAAK,GAAG,CAAZ;AACAJ,EAAAA,MAAM,GAAG,MAAM,IAAIK,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AACpDC,IAAAA,UAAU,CAAC,MAAM;AACf,UAAIT,IAAJ,EAAU;AACR;AACD;;AACDA,MAAAA,IAAI,GAAG,IAAP;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAH,MAAAA,MAAM,CAAC;AAAEX,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAN;AACD,KAPS,EAOPA,OAPO,CAAV;;AASA,WAAO,CAACG,IAAD,IAASD,WAAhB,EAA6B;AAC3B;AACA,OAAC,YAAY;AACX,YAAI;AACF,gBAAMa,iBAAiB,GAAG,MAAMd,UAAU,CAACe,oBAAX,CAAgC,CAC9DjB,IAD8D,CAAhC,CAAhC;AAGAK,UAAAA,MAAM,GAAGW,iBAAiB,IAAIA,iBAAiB,CAACE,KAAlB,CAAwB,CAAxB,CAA9B;;AACA,cAAI,CAACd,IAAL,EAAW;AACT,gBAAI,CAACC,MAAL,EAAa;AACXS,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCf,IAApC,EAA0CK,MAA1C;AACD,aAFD,MAEO,IAAIA,MAAM,CAACG,GAAX,EAAgB;AACrBM,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bf,IAA9B,EAAoCK,MAApC;AACAD,cAAAA,IAAI,GAAG,IAAP;AACAQ,cAAAA,MAAM,CAACP,MAAM,CAACG,GAAR,CAAN;AACD,aAJM,MAIA,IAAI,CAACH,MAAM,CAACE,aAAZ,EAA2B;AAChCO,cAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCf,IAAzC,EAA+CK,MAA/C;AACD,aAFM,MAEA;AACLS,cAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCf,IAArC,EAA2CK,MAA3C;AACAD,cAAAA,IAAI,GAAG,IAAP;AACAO,cAAAA,OAAO,CAACN,MAAD,CAAP;AACD;AACF;AACF,SApBD,CAoBE,OAAOc,CAAP,EAAU;AACV,cAAI,CAACf,IAAL,EAAW;AACTU,YAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2Cf,IAA3C,EAAiDmB,CAAjD;AACD;AACF;AACF,OA1BD;;AA2BA,YAAMC,KAAK,CAAC,IAAD,CAAX;AACD;AACF,GAzCc,CAAf,CARuD,CAmDvD;;AACA,MAAIlB,UAAU,CAACmB,uBAAX,CAAmCZ,KAAnC,CAAJ,EAA+C;AAC7CP,IAAAA,UAAU,CAACoB,uBAAX,CAAmCb,KAAnC;AACD;;AACDL,EAAAA,IAAI,GAAG,IAAP;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCV,MAAhC;AACA,SAAOA,MAAP;AACD,CA/DM;;AAiEP,MAAMkB,uCAAuC,GAAG,CAC9CC,sBAD8C,EAE9CC,KAF8C,EAG9CC,aAH8C,EAI9CC,mBAJ8C,KAK3C;AACH,QAAMC,IAAI,GAAG,CACX;AAAEC,IAAAA,MAAM,EAAEJ,KAAV;AAAiBK,IAAAA,QAAQ,EAAE,IAA3B;AAAiCC,IAAAA,UAAU,EAAE;AAA7C,GADW,EAEX;AAAEF,IAAAA,MAAM,EAAEL,sBAAV;AAAkCM,IAAAA,QAAQ,EAAE,KAA5C;AAAmDC,IAAAA,UAAU,EAAE;AAA/D,GAFW,EAGX;AAAEF,IAAAA,MAAM,EAAEH,aAAV;AAAyBI,IAAAA,QAAQ,EAAE,KAAnC;AAA0CC,IAAAA,UAAU,EAAE;AAAtD,GAHW,EAIX;AAAEF,IAAAA,MAAM,EAAEF,mBAAV;AAA+BG,IAAAA,QAAQ,EAAE,KAAzC;AAAgDC,IAAAA,UAAU,EAAE;AAA5D,GAJW,EAKX;AACEF,IAAAA,MAAM,EAAE7C,MAAM,CAACY,IAAP,CAAYR,aAAZ,CAA0B4C,SADpC;AAEEF,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,UAAU,EAAE;AAHd,GALW,EAUX;AAAEF,IAAAA,MAAM,EAAE3C,gBAAV;AAA4B4C,IAAAA,QAAQ,EAAE,KAAtC;AAA6CC,IAAAA,UAAU,EAAE;AAAzD,GAVW,EAWX;AACEF,IAAAA,MAAM,EAAE7C,MAAM,CAACY,IAAP,CAAYqC,kBADtB;AAEEH,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,UAAU,EAAE;AAHd,GAXW,CAAb;AAiBA,SAAO,IAAI/C,MAAM,CAACY,IAAP,CAAYsC,sBAAhB,CAAuC;AAC5CN,IAAAA,IAD4C;AAE5CI,IAAAA,SAAS,EAAEtC,uCAFiC;AAG5CyC,IAAAA,IAAI,EAAEC,MAAM,CAACC,IAAP,CAAY,EAAZ;AAHsC,GAAvC,CAAP;AAKD,CA5BD;;AA8BA,OAAO,MAAMC,oBAAoB,GAAG,OAClCC,YADkC,EAElCC,cAFkC,EAGlCtC,UAHkC,KAID;AACjC,QAAMuC,QAAQ,GAAG,IAAIzD,MAAM,CAAC0D,QAAX,CAAoBxC,UAApB,EAAgCqC,YAAhC,EAA8C;AAC7DI,IAAAA,mBAAmB,EAAE;AADwC,GAA9C,CAAjB;AAIA,QAAMC,GAAG,GAAG,MAAM5D,MAAM,CAAC6D,OAAP,CAAeC,QAAf,CAAwBnD,qBAAxB,EAA+C8C,QAA/C,CAAlB;AAEA,QAAMM,OAAO,GAAG,IAAI/D,MAAM,CAAC6D,OAAX,CAAmBD,GAAnB,EAAwBjD,qBAAxB,EAA+C8C,QAA/C,CAAhB;AAEA,QAAMO,KAAU,GAAG,MAAMD,OAAO,CAACE,OAAR,CAAgBC,YAAhB,CAA6BC,KAA7B,CAAmCX,cAAnC,CAAzB;AACA,QAAMY,cAAc,GAAGJ,KAAK,CAACb,IAAN,CAAWiB,cAAX,CAA0BC,QAA1B,EAAvB;AACA,QAAMC,aAAa,GAAGN,KAAK,CAACM,aAAN,CAAoBD,QAApB,EAAtB;AACA,QAAME,cAAc,GAAGH,cAAc,GAAGE,aAAxC;AAEA,QAAME,OAAO,GACXR,KAAK,CAACb,IAAN,CAAWsB,qBAAX,IACAT,KAAK,CAACb,IAAN,CAAWsB,qBAAX,CAAiCD,OADjC,KAEC,CAACR,KAAK,CAACb,IAAN,CAAWuB,UAAZ,IACCV,KAAK,CAACb,IAAN,CAAWuB,UAAX,CAAsBL,QAAtB,KAAmC,IAAIM,IAAJ,GAAWC,OAAX,KAAuB,IAH5D,CADF;AAMA,SAAO;AACLC,IAAAA,EAAE,EAAErB,cADC;AAELO,IAAAA,OAFK;AAGLC,IAAAA,KAAK,EAAE;AACLI,MAAAA,cADK;AAELE,MAAAA,aAFK;AAGLC,MAAAA,cAHK;AAILO,MAAAA,SAAS,EAAEP,cAAc,KAAK,CAJzB;AAKLQ,MAAAA,QAAQ,EACN,CAACP,OAAO,IACNR,KAAK,CAACb,IAAN,CAAWuB,UAAX,CAAsBL,QAAtB,KAAmC,IAAIM,IAAJ,GAAWC,OAAX,KAAuB,IAD5D,MAECZ,KAAK,CAACgB,WAAN,GACGhB,KAAK,CAACgB,WAAN,CAAkBC,cAAlB,CAAiCC,IAAjC,GACElB,KAAK,CAACgB,WAAN,CAAkBG,MAAlB,CAAyBd,QAAzB,KAAsC,IAAIM,IAAJ,GAAWC,OAAX,KAAuB,IAD/D,GAEEN,aAAa,GAAGN,KAAK,CAACgB,WAAN,CAAkBG,MAAlB,CAAyBd,QAAzB,EAHrB,GAIG,IANJ,CANG;AAaLe,MAAAA,SAAS,EAAEZ,OAbN;AAcLE,MAAAA,UAAU,EAAEV,KAAK,CAACb,IAAN,CAAWuB,UAdlB;AAeLW,MAAAA,QAAQ,EAAErB,KAAK,CAACsB,MAfX;AAgBLC,MAAAA,SAAS,EAAEvB,KAAK,CAACuB,SAhBZ;AAiBLC,MAAAA,UAAU,EAAExB,KAAK,CAACb,IAAN,CAAWqC,UAjBlB;AAkBLR,MAAAA,WAAW,EAAEhB,KAAK,CAACb,IAAN,CAAW6B,WAlBnB;AAmBLP,MAAAA,qBAAqB,EAAET,KAAK,CAACb,IAAN,CAAWsB,qBAnB7B;AAoBLgB,MAAAA,cAAc,EAAEzB,KAAK,CAACb,IAAN,CAAWsC,cApBtB;AAqBLC,MAAAA,KAAK,EAAE1B,KAAK,CAACb,IAAN,CAAWuC;AArBb;AAHF,GAAP;AA2BD,CAnDM;;AAqDP,MAAMC,gBAAgB,GAAG,MACvBC,IADuB,IAEY;AACnC,SAAO,CACL,MAAM5F,MAAM,CAACY,IAAP,CAAYC,SAAZ,CAAsBgF,kBAAtB,CACJ,CACEzC,MAAM,CAACC,IAAP,CAAY,UAAZ,CADF,EAEEvC,yBAAyB,CAACgF,QAA1B,EAFF,EAGEF,IAAI,CAACE,QAAL,EAHF,EAIE1C,MAAM,CAACC,IAAP,CAAY,SAAZ,CAJF,CADI,EAOJvC,yBAPI,CADD,EAUL,CAVK,CAAP;AAWD,CAdD;;AAgBA,MAAMiF,WAAW,GAAG,MAClBH,IADkB,IAEiB;AACnC,SAAO,CACL,MAAM5F,MAAM,CAACY,IAAP,CAAYC,SAAZ,CAAsBgF,kBAAtB,CACJ,CACEzC,MAAM,CAACC,IAAP,CAAY,UAAZ,CADF,EAEEvC,yBAAyB,CAACgF,QAA1B,EAFF,EAGEF,IAAI,CAACE,QAAL,EAHF,CADI,EAMJhF,yBANI,CADD,EASL,CATK,CAAP;AAUD,CAbD;;AAeA,OAAO,MAAMkF,sBAAsB,GAAG,MACpC9B,YADoC,IAES;AAC7C,SAAO,MAAMlE,MAAM,CAACY,IAAP,CAAYC,SAAZ,CAAsBgF,kBAAtB,CACX,CAACzC,MAAM,CAACC,IAAP,CAAY,eAAZ,CAAD,EAA+Ba,YAAY,CAAC4B,QAAb,EAA/B,CADW,EAEXnF,qBAFW,CAAb;AAID,CAPM;AASP,OAAO,MAAMsF,YAAY,GAAG,OAC1B/B,YAD0B,EAE1BzB,KAF0B,KAGU;AACpC,QAAMmD,IAAI,GAAG5F,MAAM,CAACY,IAAP,CAAYsF,OAAZ,CAAoBC,QAApB,EAAb;AAEA,QAAMC,uBAAuB,GAAG,CAC9B,MAAM7F,aAAa,CAACqF,IAAI,CAACS,SAAN,EAAiB5D,KAAjB,CADW,EAE9B,CAF8B,CAAhC;AAIA,QAAM6D,wBAAwB,GAAGpC,YAAY,CAACF,KAAb,CAAmBuB,SAAnB,GAC7B,CAAC,MAAMhF,aAAa,CAAC2D,YAAY,CAACF,KAAb,CAAmBuB,SAApB,EAA+B9C,KAA/B,CAApB,EAA2D,CAA3D,CAD6B,GAE7BA,KAFJ;AAIA,QAAM8D,mBAAmB,GAAGrC,YAAY,CAACW,EAAzC;AACA,QAAM2B,iBAAiB,GAAG,EAA1B;AACA,QAAMC,OAA8B,GAAG,CAACb,IAAD,CAAvC;AACA,QAAMc,mBAAmB,GAAG,EAA5B;AACA,QAAMC,YAAY,GAAG,CACnB3G,MAAM,CAACY,IAAP,CAAYR,aAAZ,CAA0BwG,aAA1B,CAAwC;AACtCC,IAAAA,UAAU,EAAEpE,KAD0B;AAEtCqE,IAAAA,gBAAgB,EAAElB,IAAI,CAACS,SAFe;AAGtCU,IAAAA,KAAK,EAAE9G,UAAU,CAAC+G,IAHoB;AAItCC,IAAAA,QAAQ,EACN,MAAM/C,YAAY,CAACH,OAAb,CAAqBN,QAArB,CAA8BvC,UAA9B,CAAyCgG,iCAAzC,CACJjH,UAAU,CAAC+G,IADP,CAL8B;AAQtChE,IAAAA,SAAS,EAAE9C;AAR2B,GAAxC,CADmB,EAWnBC,KAAK,CAACgH,yBAAN,CACEjH,gBADF,EAEE0F,IAAI,CAACS,SAFP,EAGE,CAHF,EAIE5D,KAJF,EAKEA,KALF,CAXmB,EAkBnBF,uCAAuC,CACrC6D,uBADqC,EAErC3D,KAFqC,EAGrCA,KAHqC,EAIrCmD,IAAI,CAACS,SAJgC,CAlBpB,EAwBnBlG,KAAK,CAACiH,uBAAN,CACElH,gBADF,EAEE0F,IAAI,CAACS,SAFP,EAGED,uBAHF,EAIE3D,KAJF,EAKE,EALF,EAME,CANF,CAxBmB,CAArB;;AAkCA,MAAIyB,YAAY,CAACF,KAAb,CAAmBwB,UAAvB,EAAmC;AACjCgB,IAAAA,iBAAiB,CAACa,IAAlB,CAAuB;AACrBxE,MAAAA,MAAM,EAAE,CACN,MAAMpC,eAAe,CACnBgC,KADmB,EAEnByB,YAAY,CAACF,KAAb,CAAmBwB,UAAnB,CAA8B8B,iBAFX,CADf,EAKN,CALM,CADa;AAOrBvE,MAAAA,UAAU,EAAE,IAPS;AAQrBD,MAAAA,QAAQ,EAAE;AARW,KAAvB;;AAUA,QAAIoB,YAAY,CAACF,KAAb,CAAmBwB,UAAnB,CAA8B+B,WAAlC,EAA+C;AAC7Cf,MAAAA,iBAAiB,CAACa,IAAlB,CAAuB;AACrBxE,QAAAA,MAAM,EAAEvC,KADa;AAErByC,QAAAA,UAAU,EAAE,KAFS;AAGrBD,QAAAA,QAAQ,EAAE;AAHW,OAAvB;AAKA0D,MAAAA,iBAAiB,CAACa,IAAlB,CAAuB;AACrBxE,QAAAA,MAAM,EAAE,CACN,MAAMrC,gBAAgB,CACpB0D,YAAY,CAACF,KAAb,CAAmBwB,UAAnB,CAA8B8B,iBADV,CADhB,EAIN,CAJM,CADa;AAMrBvE,QAAAA,UAAU,EAAE,KANS;AAOrBD,QAAAA,QAAQ,EAAE;AAPW,OAAvB;AASD;AACF;;AACD,MAAIoB,YAAY,CAACF,KAAb,CAAmBS,qBAAvB,EAA8C;AAC5C,UAAMmB,IAAI,GAAG,IAAI5F,MAAM,CAACY,IAAP,CAAYC,SAAhB,CACXqD,YAAY,CAACF,KAAb,CAAmBS,qBAAnB,CAAyCmB,IAD9B,CAAb;AAIA,UAAM4B,cAAc,GAAG,CAAC,MAAMjH,aAAa,CAACqF,IAAD,EAAOnD,KAAP,CAApB,EAAmC,CAAnC,CAAvB;AACA+D,IAAAA,iBAAiB,CAACa,IAAlB,CAAuB;AACrBxE,MAAAA,MAAM,EAAE2E,cADa;AAErBzE,MAAAA,UAAU,EAAE,IAFS;AAGrBD,MAAAA,QAAQ,EAAE;AAHW,KAAvB;;AAMA,QAAIoB,YAAY,CAACF,KAAb,CAAmBS,qBAAnB,CAAyCgD,IAAzC,CAA8CC,aAAlD,EAAiE;AAC/D,YAAMC,sBAAsB,GAAG3H,MAAM,CAACY,IAAP,CAAYsF,OAAZ,CAAoBC,QAApB,EAA/B;AAEAK,MAAAA,iBAAiB,CAACa,IAAlB,CAAuB;AACrBxE,QAAAA,MAAM,EAAE+C,IADa;AAErB7C,QAAAA,UAAU,EAAE,IAFS;AAGrBD,QAAAA,QAAQ,EAAE;AAHW,OAAvB;AAKA0D,MAAAA,iBAAiB,CAACa,IAAlB,CAAuB;AACrBxE,QAAAA,MAAM,EAAE8E,sBAAsB,CAACtB,SADV;AAErBtD,QAAAA,UAAU,EAAE,KAFS;AAGrBD,QAAAA,QAAQ,EAAE;AAHW,OAAvB;AAKA2D,MAAAA,OAAO,CAACY,IAAR,CAAaM,sBAAb;AACA,YAAMC,MAAM,GACV,MAAM1D,YAAY,CAACH,OAAb,CAAqBN,QAArB,CAA8BvC,UAA9B,CAAyC2G,cAAzC,CACJL,cADI,CADR;;AAIA,UAAII,MAAJ,EAAY;AACVjB,QAAAA,YAAY,CAACU,IAAb,CACElH,KAAK,CAAC2H,wBAAN,CACE5H,gBADF,EAEEsH,cAFF,EAGEG,sBAAsB,CAACtB,SAHzB,EAIE5D,KAJF,EAKE,EALF,EAME,CANF,CADF;AAUAiE,QAAAA,mBAAmB,CAACW,IAApB,CACElH,KAAK,CAAC4H,uBAAN,CACE7H,gBADF,EAEEsH,cAFF,EAGE/E,KAHF,EAIE,EAJF,CADF;AAQD;AACF;AACF;;AAED,MAAIyB,YAAY,CAACF,KAAb,CAAmBuB,SAAvB,EAAkC;AAChC,UAAMyC,iBAAiB,GAAGhI,MAAM,CAACY,IAAP,CAAYsF,OAAZ,CAAoBC,QAApB,EAA1B;AAEAM,IAAAA,OAAO,CAACY,IAAR,CAAaW,iBAAb;AACAxB,IAAAA,iBAAiB,CAACa,IAAlB,CAAuB;AACrBxE,MAAAA,MAAM,EAAEyD,wBADa;AAErBvD,MAAAA,UAAU,EAAE,IAFS;AAGrBD,MAAAA,QAAQ,EAAE;AAHW,KAAvB;AAKA0D,IAAAA,iBAAiB,CAACa,IAAlB,CAAuB;AACrBxE,MAAAA,MAAM,EAAEmF,iBAAiB,CAAC3B,SADL;AAErBtD,MAAAA,UAAU,EAAE,KAFS;AAGrBD,MAAAA,QAAQ,EAAE;AAHW,KAAvB;AAMA6D,IAAAA,YAAY,CAACU,IAAb,CACElH,KAAK,CAAC2H,wBAAN,CACE5H,gBADF,EAEEoG,wBAFF,EAGE0B,iBAAiB,CAAC3B,SAHpB,EAIE5D,KAJF,EAKE,EALF,EAMEyB,YAAY,CAACF,KAAb,CAAmB0B,KAAnB,CAAyBrB,QAAzB,EANF,CADF;AAUAqC,IAAAA,mBAAmB,CAACW,IAApB,CACElH,KAAK,CAAC4H,uBAAN,CACE7H,gBADF,EAEEoG,wBAFF,EAGE7D,KAHF,EAIE,EAJF,CADF;AAQD;;AACD,QAAMwF,eAAe,GAAG,MAAMlC,WAAW,CAACH,IAAI,CAACS,SAAN,CAAzC;AACA,QAAM6B,aAAa,GAAG,MAAMvC,gBAAgB,CAACC,IAAI,CAACS,SAAN,CAA5C;AAEA,QAAM,CAAC8B,mBAAD,EAAsBC,WAAtB,IAAqC,MAAMpC,sBAAsB,CACrEO,mBADqE,CAAvE;AAIAI,EAAAA,YAAY,CAACU,IAAb,CACE,MAAMnD,YAAY,CAACH,OAAb,CAAqBsE,WAArB,CAAiCC,OAAjC,CAAyCF,WAAzC,EAAsD;AAC1DG,IAAAA,QAAQ,EAAE;AACRrE,MAAAA,YAAY,EAAEqC,mBADN;AAER4B,MAAAA,mBAFQ;AAGR1F,MAAAA,KAAK,EAAEA,KAHC;AAIR6C,MAAAA,MAAM,EAAEpB,YAAY,CAACF,KAAb,CAAmBqB,QAJnB;AAKRO,MAAAA,IAAI,EAAEA,IAAI,CAACS,SALH;AAMRmC,MAAAA,QAAQ,EAAEP,eANF;AAORC,MAAAA,aAPQ;AAQRO,MAAAA,aAAa,EAAEhG,KARP;AASRiG,MAAAA,eAAe,EAAEjG,KATT;AAURkG,MAAAA,oBAAoB,EAAE7H,yBAVd;AAWR8H,MAAAA,YAAY,EAAE1I,gBAXN;AAYR2I,MAAAA,aAAa,EAAEzI,aAAa,CAAC4C,SAZrB;AAaR8F,MAAAA,IAAI,EAAE9I,MAAM,CAACY,IAAP,CAAYqC,kBAbV;AAcR8F,MAAAA,KAAK,EAAE/I,MAAM,CAACY,IAAP,CAAYoI,mBAdX;AAeRC,MAAAA,iBAAiB,EAAEjJ,MAAM,CAACY,IAAP,CAAYsI,gCAfvB;AAgBRC,MAAAA,wBAAwB,EAAEnJ,MAAM,CAACY,IAAP,CAAYwI;AAhB9B,KADgD;AAmB1D5C,IAAAA,iBAAiB,EACfA,iBAAiB,CAAC6C,MAAlB,GAA2B,CAA3B,GAA+B7C,iBAA/B,GAAmD8C;AApBK,GAAtD,CADR;;AAyBA,MAAI;AACF,WAAO,CACL,MAAMjJ,gBAAgB,CACpB6D,YAAY,CAACH,OAAb,CAAqBN,QAArB,CAA8BvC,UADV,EAEpBgD,YAAY,CAACH,OAAb,CAAqBN,QAArB,CAA8B6B,MAFV,EAGpB,CAACqB,YAAD,EAAeD,mBAAf,CAHoB,EAIpB,CAACD,OAAD,EAAU,EAAV,CAJoB,CADjB,EAOL8C,GAPK,CAODC,GAPC,CAOGC,CAAC,IAAIA,CAAC,CAACzI,IAPV,CAAP;AAQD,GATD,CASE,OAAOmB,CAAP,EAAU;AACVL,IAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ;AACD;;AAED,SAAO,EAAP;AACD,CArNM;AAuNP,OAAO,MAAMuH,cAAc,GAAG,UAACC,OAAD,EAAwC;AAAA,MAAtBC,KAAsB,uEAAd,CAAc;AACpE,SAAQ,GAAED,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiBD,KAAjB,CAAwB,MAAKD,OAAO,CAACE,KAAR,CAAc,CAACD,KAAf,CAAsB,EAA7D;AACD,CAFM;;AAIP,MAAMxH,KAAK,GAAI0H,EAAD,IAA+B;AAC3C,SAAO,IAAIpI,OAAJ,CAAYC,OAAO,IAAIE,UAAU,CAACF,OAAD,EAAUmI,EAAV,CAAjC,CAAP;AACD,CAFD","sourcesContent":["import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | [number, anchor.BN];\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  const presale =\n    state.data.whitelistMintSettings &&\n    state.data.whitelistMintSettings.presale &&\n    (!state.data.goLiveDate ||\n      state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        (presale ||\n          state.data.goLiveDate.toNumber() < new Date().getTime() / 1000) &&\n        (state.endSettings\n          ? state.endSettings.endSettingType.date\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\n            : itemsRedeemed < state.endSettings.number.toNumber()\n          : true),\n      isPresale: presale,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n"]},"metadata":{},"sourceType":"module"}