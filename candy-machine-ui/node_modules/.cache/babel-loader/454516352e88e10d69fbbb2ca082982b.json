{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSolanaGateway = exports.chainImplementation = void 0;\n\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\n\nconst config_1 = require(\"./config\");\n\nconst types_1 = require(\"../types\");\n\nconst GatewayContext_1 = require(\"../gateway/GatewayContext\");\n\nconst logger_1 = __importDefault(require(\"../logger\")); // eslint-disable-next-line import/prefer-default-export\n\n\nconst chainImplementation = _ref => {\n  let {\n    clusterUrl,\n    publicKey,\n    signTransaction,\n    gatekeeperNetworkAddress,\n    stage\n  } = _ref;\n  logger_1.default.debug('Connecting to cluster with commitment recent', clusterUrl);\n  const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n  return {\n    addOnGatewayTokenChangeListener: (gatewayToken, tokenDidChange) => {\n      return (0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), token => {\n        tokenDidChange({\n          issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n          gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n          owner: token.owner.toBase58(),\n          state: types_1.State[token.state],\n          identifier: token.publicKey.toBase58(),\n          expiryTime: token.expiryTime\n        });\n      });\n    },\n    removeOnGatewayTokenChangeListener: listenerId => {\n      (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n    },\n    findGatewayToken: async () => {\n      const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n      if (!onChainToken) return undefined;\n      return {\n        issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n        gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n        owner: onChainToken.owner.toBase58(),\n        state: types_1.State[onChainToken.state],\n        identifier: onChainToken.publicKey.toBase58(),\n        expiryTime: onChainToken.expiryTime\n      };\n    },\n    proveWalletOwnership: async () => {\n      const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl));\n      return result.toString('base64');\n    },\n    chainType: types_1.ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n      queryParams: {\n        network: (0, config_1.urlToCluster)(clusterUrl)\n      }\n    }\n  };\n};\n\nexports.chainImplementation = chainImplementation;\n\nconst useSolanaGateway = () => {\n  const {\n    gatewayToken\n  } = (0, GatewayContext_1.useGateway)();\n  const solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new web3_js_1.PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  return Object.assign(Object.assign({}, (0, GatewayContext_1.useGateway)()), {\n    gatewayToken: solanaGatewayToken\n  });\n};\n\nexports.useSolanaGateway = useSolanaGateway;","map":{"version":3,"sources":["/Users/shawn/metaplex/js/packages/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/chainImplementation.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","useSolanaGateway","chainImplementation","solana_gateway_ts_1","require","web3_js_1","prove_solana_wallet_1","config_1","types_1","GatewayContext_1","logger_1","clusterUrl","publicKey","signTransaction","gatekeeperNetworkAddress","stage","default","debug","connection","Connection","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","onGatewayTokenChange","PublicKey","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","State","expiryTime","removeOnGatewayTokenChangeListener","listenerId","removeAccountChangeListener","findGatewayToken","onChainToken","undefined","proveWalletOwnership","result","prove","makeConfig","toString","chainType","ChainType","SOLANA","httpConfig","baseUrl","getGatekeeperEndpoint","queryParams","network","urlToCluster","useGateway","solanaGatewayToken","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSolanaGateway = exports.chainImplementation = void 0;\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\nconst config_1 = require(\"./config\");\nconst types_1 = require(\"../types\");\nconst GatewayContext_1 = require(\"../gateway/GatewayContext\");\nconst logger_1 = __importDefault(require(\"../logger\"));\n// eslint-disable-next-line import/prefer-default-export\nconst chainImplementation = ({ clusterUrl, publicKey, signTransaction, gatekeeperNetworkAddress, stage, }) => {\n    logger_1.default.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n    return {\n        addOnGatewayTokenChangeListener: (gatewayToken, tokenDidChange) => {\n            return (0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: types_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            });\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: types_1.State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl));\n            return result.toString('base64');\n        },\n        chainType: types_1.ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n            queryParams: { network: (0, config_1.urlToCluster)(clusterUrl) },\n        },\n    };\n};\nexports.chainImplementation = chainImplementation;\nconst useSolanaGateway = () => {\n    const { gatewayToken } = (0, GatewayContext_1.useGateway)();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new web3_js_1.PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    return Object.assign(Object.assign({}, (0, GatewayContext_1.useGateway)()), { gatewayToken: solanaGatewayToken });\n};\nexports.useSolanaGateway = useSolanaGateway;\n"]},"metadata":{},"sourceType":"script"}