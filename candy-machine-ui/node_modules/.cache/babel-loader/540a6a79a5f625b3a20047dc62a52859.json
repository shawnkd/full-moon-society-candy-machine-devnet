{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeConfig = exports.getGatekeeperEndpoint = exports.GATEKEEPER_ENDPOINTS = exports.urlToCluster = exports.clusterEndpoint = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst clusterEndpoint = cluster => {\n  switch (cluster) {\n    case 'civicnet':\n      return 'https://d3ab7dlfud2b5u.cloudfront.net';\n\n    case 'localnet':\n      return 'http://localhost:8899';\n\n    default:\n      {\n        return cluster === 'mainnet-beta' ? 'https://civic.rpcpool.com/f40a068020b85335d0c8f2783747/' : (0, web3_js_1.clusterApiUrl)(cluster);\n      }\n  }\n};\n\nexports.clusterEndpoint = clusterEndpoint; // reverse lookup of cluster from url\n// note - this is a \"best-guess\" heuristic. If the client passes an unrecognised\n// url, default to mainnet\n\nconst urlToCluster = clusterUrl => {\n  const supportedClusters = ['devnet', 'testnet', 'mainnet-beta', 'civicnet', 'localnet'];\n  const matchedUrlCluster = supportedClusters.find(cluster => (0, exports.clusterEndpoint)(cluster) === clusterUrl);\n  if (matchedUrlCluster) return matchedUrlCluster;\n  const matchedStringCluster = supportedClusters.find(cluster => clusterUrl.indexOf(cluster) >= 0);\n  if (matchedStringCluster) return matchedStringCluster;\n  return 'mainnet-beta';\n};\n\nexports.urlToCluster = urlToCluster;\nconst solanaVersionedEndpoint = 'v1/token/solana';\nexports.GATEKEEPER_ENDPOINTS = {\n  local: `http://localhost:3001/local/${solanaVersionedEndpoint}`,\n  test: `http://localhost:3001/local/${solanaVersionedEndpoint}`,\n  dev: `https://dev-gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n  preprod: `https://preprod-gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n  prod: `https://gatekeeper-api.civic.com/${solanaVersionedEndpoint}`\n};\n\nconst getGatekeeperEndpoint = stage => {\n  const endpoint = exports.GATEKEEPER_ENDPOINTS[stage];\n\n  if (!endpoint) {\n    throw new Error(`Invalid stage ${stage}`);\n  }\n\n  return endpoint;\n};\n\nexports.getGatekeeperEndpoint = getGatekeeperEndpoint;\n\nconst makeConfig = clusterUrl => {\n  const cluster = (0, exports.urlToCluster)(clusterUrl);\n  return {\n    cluster,\n    commitment: 'confirmed',\n    // this map instructs the POWO library to use clusterUrl\n    // to connect to the solana network. This avoids rate limiting issues with using the default\n    // public urls\n    supportedClusterUrls: {\n      [cluster]: clusterUrl\n    },\n    recentBlockCheck: false\n  };\n};\n\nexports.makeConfig = makeConfig;","map":{"version":3,"sources":["/Users/shawn/solana-dev/FMS_CM/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/config.js"],"names":["Object","defineProperty","exports","value","makeConfig","getGatekeeperEndpoint","GATEKEEPER_ENDPOINTS","urlToCluster","clusterEndpoint","web3_js_1","require","cluster","clusterApiUrl","clusterUrl","supportedClusters","matchedUrlCluster","find","matchedStringCluster","indexOf","solanaVersionedEndpoint","local","test","dev","preprod","prod","stage","endpoint","Error","commitment","supportedClusterUrls","recentBlockCheck"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,oBAAR,GAA+BJ,OAAO,CAACK,YAAR,GAAuBL,OAAO,CAACM,eAAR,GAA0B,KAAK,CAA1I;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMF,eAAe,GAAIG,OAAD,IAAa;AACjC,UAAQA,OAAR;AACI,SAAK,UAAL;AACI,aAAO,uCAAP;;AACJ,SAAK,UAAL;AACI,aAAO,uBAAP;;AACJ;AAAS;AACL,eAAOA,OAAO,KAAK,cAAZ,GACD,yDADC,GAED,CAAC,GAAGF,SAAS,CAACG,aAAd,EAA6BD,OAA7B,CAFN;AAGH;AATL;AAWH,CAZD;;AAaAT,OAAO,CAACM,eAAR,GAA0BA,eAA1B,C,CACA;AACA;AACA;;AACA,MAAMD,YAAY,GAAIM,UAAD,IAAgB;AACjC,QAAMC,iBAAiB,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,cAAtB,EAAsC,UAAtC,EAAkD,UAAlD,CAA1B;AACA,QAAMC,iBAAiB,GAAGD,iBAAiB,CAACE,IAAlB,CAAwBL,OAAD,IAAa,CAAC,GAAGT,OAAO,CAACM,eAAZ,EAA6BG,OAA7B,MAA0CE,UAA9E,CAA1B;AACA,MAAIE,iBAAJ,EACI,OAAOA,iBAAP;AACJ,QAAME,oBAAoB,GAAGH,iBAAiB,CAACE,IAAlB,CAAwBL,OAAD,IAAaE,UAAU,CAACK,OAAX,CAAmBP,OAAnB,KAA+B,CAAnE,CAA7B;AACA,MAAIM,oBAAJ,EACI,OAAOA,oBAAP;AACJ,SAAO,cAAP;AACH,CATD;;AAUAf,OAAO,CAACK,YAAR,GAAuBA,YAAvB;AACA,MAAMY,uBAAuB,GAAG,iBAAhC;AACAjB,OAAO,CAACI,oBAAR,GAA+B;AAC3Bc,EAAAA,KAAK,EAAG,+BAA8BD,uBAAwB,EADnC;AAE3BE,EAAAA,IAAI,EAAG,+BAA8BF,uBAAwB,EAFlC;AAG3BG,EAAAA,GAAG,EAAG,wCAAuCH,uBAAwB,EAH1C;AAI3BI,EAAAA,OAAO,EAAG,4CAA2CJ,uBAAwB,EAJlD;AAK3BK,EAAAA,IAAI,EAAG,oCAAmCL,uBAAwB;AALvC,CAA/B;;AAOA,MAAMd,qBAAqB,GAAIoB,KAAD,IAAW;AACrC,QAAMC,QAAQ,GAAGxB,OAAO,CAACI,oBAAR,CAA6BmB,KAA7B,CAAjB;;AACA,MAAI,CAACC,QAAL,EAAe;AACX,UAAM,IAAIC,KAAJ,CAAW,iBAAgBF,KAAM,EAAjC,CAAN;AACH;;AACD,SAAOC,QAAP;AACH,CAND;;AAOAxB,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;;AACA,MAAMD,UAAU,GAAIS,UAAD,IAAgB;AAC/B,QAAMF,OAAO,GAAG,CAAC,GAAGT,OAAO,CAACK,YAAZ,EAA0BM,UAA1B,CAAhB;AACA,SAAO;AACHF,IAAAA,OADG;AAEHiB,IAAAA,UAAU,EAAE,WAFT;AAGH;AACA;AACA;AACAC,IAAAA,oBAAoB,EAAE;AAClB,OAAClB,OAAD,GAAWE;AADO,KANnB;AASHiB,IAAAA,gBAAgB,EAAE;AATf,GAAP;AAWH,CAbD;;AAcA5B,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeConfig = exports.getGatekeeperEndpoint = exports.GATEKEEPER_ENDPOINTS = exports.urlToCluster = exports.clusterEndpoint = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst clusterEndpoint = (cluster) => {\n    switch (cluster) {\n        case 'civicnet':\n            return 'https://d3ab7dlfud2b5u.cloudfront.net';\n        case 'localnet':\n            return 'http://localhost:8899';\n        default: {\n            return cluster === 'mainnet-beta'\n                ? 'https://civic.rpcpool.com/f40a068020b85335d0c8f2783747/'\n                : (0, web3_js_1.clusterApiUrl)(cluster);\n        }\n    }\n};\nexports.clusterEndpoint = clusterEndpoint;\n// reverse lookup of cluster from url\n// note - this is a \"best-guess\" heuristic. If the client passes an unrecognised\n// url, default to mainnet\nconst urlToCluster = (clusterUrl) => {\n    const supportedClusters = ['devnet', 'testnet', 'mainnet-beta', 'civicnet', 'localnet'];\n    const matchedUrlCluster = supportedClusters.find((cluster) => (0, exports.clusterEndpoint)(cluster) === clusterUrl);\n    if (matchedUrlCluster)\n        return matchedUrlCluster;\n    const matchedStringCluster = supportedClusters.find((cluster) => clusterUrl.indexOf(cluster) >= 0);\n    if (matchedStringCluster)\n        return matchedStringCluster;\n    return 'mainnet-beta';\n};\nexports.urlToCluster = urlToCluster;\nconst solanaVersionedEndpoint = 'v1/token/solana';\nexports.GATEKEEPER_ENDPOINTS = {\n    local: `http://localhost:3001/local/${solanaVersionedEndpoint}`,\n    test: `http://localhost:3001/local/${solanaVersionedEndpoint}`,\n    dev: `https://dev-gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n    preprod: `https://preprod-gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n    prod: `https://gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n};\nconst getGatekeeperEndpoint = (stage) => {\n    const endpoint = exports.GATEKEEPER_ENDPOINTS[stage];\n    if (!endpoint) {\n        throw new Error(`Invalid stage ${stage}`);\n    }\n    return endpoint;\n};\nexports.getGatekeeperEndpoint = getGatekeeperEndpoint;\nconst makeConfig = (clusterUrl) => {\n    const cluster = (0, exports.urlToCluster)(clusterUrl);\n    return {\n        cluster,\n        commitment: 'confirmed',\n        // this map instructs the POWO library to use clusterUrl\n        // to connect to the solana network. This avoids rate limiting issues with using the default\n        // public urls\n        supportedClusterUrls: {\n            [cluster]: clusterUrl,\n        },\n        recentBlockCheck: false,\n    };\n};\nexports.makeConfig = makeConfig;\n"]},"metadata":{},"sourceType":"script"}