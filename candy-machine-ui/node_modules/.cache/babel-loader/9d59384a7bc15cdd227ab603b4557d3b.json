{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reducer = void 0;\n\nconst react_1 = require(\"react\");\n\nconst types_1 = require(\"../types\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nconst networkConfig_1 = __importDefault(require(\"../networkConfig\"));\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'tokenOnChainNotFound':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED\n      });\n\n    case 'tokenOnChainError':\n      return Object.assign(Object.assign({}, state), {\n        gatewayStatus: types_1.GatewayStatus.ERROR\n      });\n\n    default:\n      return state;\n  }\n};\n\nexports.reducer = reducer;\n\nconst useChain = (_ref, state, dispatch) => {\n  let {\n    wallet,\n    chainImplementation\n  } = _ref;\n  const {\n    expectWalletConnected\n  } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n  const {\n    gatekeeperRecordState,\n    gatewayToken,\n    gatekeeperNetworkAddress\n  } = state;\n  const config = (0, networkConfig_1.default)(gatekeeperNetworkAddress);\n\n  const logDebug = function (message) {\n    let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger_1.default.debug(`[useChain] ${message}`, obj);\n  };\n\n  const logError = function (message) {\n    let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger_1.default.error(`[useChain] ${message}`, obj);\n  };\n\n  const removeOnChainListener = listernerId => {\n    try {\n      logDebug('Removing onChainListener with id: ', listernerId);\n      chainImplementation.removeOnGatewayTokenChangeListener(listernerId);\n    } catch (error) {\n      logError('Error removing on chain listener', error);\n    }\n  };\n  /**\n   * listen to the blockchain for any token changes and update local state if there are\n   */\n\n\n  const addTokenChangeListeners = // eslint-disable-next-line @typescript-eslint/no-shadow\n  gatewayToken => {\n    const tokenChangeCallback = token => {\n      dispatch({\n        type: 'tokenChange',\n        token\n      });\n      dispatch({\n        type: 'civicPass_check_token_status',\n        token\n      });\n    };\n\n    const listernerId = chainImplementation.addOnGatewayTokenChangeListener(gatewayToken, tokenChangeCallback);\n    logDebug('Adding onChainListener with id: ', listernerId);\n    return listernerId;\n  };\n\n  (0, react_1.useEffect)(() => {\n    let listernerId;\n\n    if (gatewayToken) {\n      listernerId = addTokenChangeListeners(gatewayToken);\n    }\n\n    return () => {\n      if (listernerId) {\n        removeOnChainListener(listernerId);\n      }\n    };\n  }, [gatekeeperRecordState, gatewayToken]);\n  /**\n   * use the on-chain lookup utility findGatewayToken to retrieve a token from the chain\n   * when a token is found, set up listeners to monitor any on-chain changes\n   */\n\n  const dispatchTokenFromChain = async () => {\n    const connectedWallet = expectWalletConnected();\n\n    try {\n      logDebug('Fetching token from chain');\n      const token = await chainImplementation.findGatewayToken();\n\n      if (!token) {\n        dispatch({\n          type: 'tokenOnChainNotFound'\n        });\n        return;\n      }\n\n      logDebug('Token found', token);\n      dispatch({\n        type: 'tokenChange',\n        token\n      }); // Determine if we should show the civicPass dialog when we have a gateway token\n\n      const shouldDispatchTokenFromChain = gatekeeperRecordState && [types_1.GatekeeperRecordState.ISSUED_EXPIRED, types_1.GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING, types_1.GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED].includes(gatekeeperRecordState);\n      if (!shouldDispatchTokenFromChain) return;\n      dispatch({\n        type: 'civicPass_check_token_status',\n        token\n      });\n    } catch (error) {\n      logError(`Error getting token from chain for ${connectedWallet.publicKey}`, error);\n      dispatch({\n        type: 'tokenOnChainError'\n      });\n      throw error;\n    }\n  };\n  /**\n   * Determine if we should fetch a token from chain based on the gatekeeper record state\n   */\n\n\n  (0, react_1.useEffect)(() => {\n    const shouldDispatchTokenFromChain = gatekeeperRecordState && [types_1.GatekeeperRecordState.ISSUED, types_1.GatekeeperRecordState.ISSUED_EXPIRED, types_1.GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING, types_1.GatekeeperRecordState.REQUESTED, types_1.GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED, types_1.GatekeeperRecordState.SERVER_FAILURE].includes(gatekeeperRecordState);\n    if (!shouldDispatchTokenFromChain) return;\n    dispatchTokenFromChain();\n  }, [gatekeeperRecordState]);\n  /**\n   * Check token on chain if checking the record status is not required\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (config.requiresGatekeeperRecordStatusCheck) return;\n    dispatchTokenFromChain();\n  }, [config.requiresGatekeeperRecordStatusCheck]);\n  return {\n    addTokenChangeListeners,\n    dispatchTokenFromChain\n  };\n};\n\nexports.default = useChain;","map":{"version":3,"sources":["/Users/shawn/solana-dev/FMS_CM/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useChain.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","reducer","react_1","require","types_1","logger_1","useWalletHooks_1","networkConfig_1","state","action","type","assign","gatewayStatus","GatewayStatus","NOT_REQUESTED","ERROR","useChain","dispatch","wallet","chainImplementation","expectWalletConnected","default","gatekeeperRecordState","gatewayToken","gatekeeperNetworkAddress","config","logDebug","message","obj","debug","logError","error","removeOnChainListener","listernerId","removeOnGatewayTokenChangeListener","addTokenChangeListeners","tokenChangeCallback","token","addOnGatewayTokenChangeListener","useEffect","dispatchTokenFromChain","connectedWallet","findGatewayToken","shouldDispatchTokenFromChain","GatekeeperRecordState","ISSUED_EXPIRED","ISSUED_EXPIRY_APPROACHING","ISSUED_LOCATION_NOT_SUPPORTED","includes","publicKey","ISSUED","REQUESTED","SERVER_FAILURE","requiresGatekeeperRecordStatusCheck"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reducer = void 0;\nconst react_1 = require(\"react\");\nconst types_1 = require(\"../types\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst networkConfig_1 = __importDefault(require(\"../networkConfig\"));\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'tokenOnChainNotFound':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED });\n        case 'tokenOnChainError':\n            return Object.assign(Object.assign({}, state), { gatewayStatus: types_1.GatewayStatus.ERROR });\n        default:\n            return state;\n    }\n};\nexports.reducer = reducer;\nconst useChain = ({ wallet, chainImplementation, }, state, dispatch) => {\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    const { gatekeeperRecordState, gatewayToken, gatekeeperNetworkAddress } = state;\n    const config = (0, networkConfig_1.default)(gatekeeperNetworkAddress);\n    const logDebug = (message, obj = null) => logger_1.default.debug(`[useChain] ${message}`, obj);\n    const logError = (message, obj = null) => logger_1.default.error(`[useChain] ${message}`, obj);\n    const removeOnChainListener = (listernerId) => {\n        try {\n            logDebug('Removing onChainListener with id: ', listernerId);\n            chainImplementation.removeOnGatewayTokenChangeListener(listernerId);\n        }\n        catch (error) {\n            logError('Error removing on chain listener', error);\n        }\n    };\n    /**\n     * listen to the blockchain for any token changes and update local state if there are\n     */\n    const addTokenChangeListeners = \n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    (gatewayToken) => {\n        const tokenChangeCallback = (token) => {\n            dispatch({ type: 'tokenChange', token });\n            dispatch({ type: 'civicPass_check_token_status', token });\n        };\n        const listernerId = chainImplementation.addOnGatewayTokenChangeListener(gatewayToken, tokenChangeCallback);\n        logDebug('Adding onChainListener with id: ', listernerId);\n        return listernerId;\n    };\n    (0, react_1.useEffect)(() => {\n        let listernerId;\n        if (gatewayToken) {\n            listernerId = addTokenChangeListeners(gatewayToken);\n        }\n        return () => {\n            if (listernerId) {\n                removeOnChainListener(listernerId);\n            }\n        };\n    }, [gatekeeperRecordState, gatewayToken]);\n    /**\n     * use the on-chain lookup utility findGatewayToken to retrieve a token from the chain\n     * when a token is found, set up listeners to monitor any on-chain changes\n     */\n    const dispatchTokenFromChain = async () => {\n        const connectedWallet = expectWalletConnected();\n        try {\n            logDebug('Fetching token from chain');\n            const token = await chainImplementation.findGatewayToken();\n            if (!token) {\n                dispatch({ type: 'tokenOnChainNotFound' });\n                return;\n            }\n            logDebug('Token found', token);\n            dispatch({ type: 'tokenChange', token });\n            // Determine if we should show the civicPass dialog when we have a gateway token\n            const shouldDispatchTokenFromChain = gatekeeperRecordState &&\n                [\n                    types_1.GatekeeperRecordState.ISSUED_EXPIRED,\n                    types_1.GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING,\n                    types_1.GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED,\n                ].includes(gatekeeperRecordState);\n            if (!shouldDispatchTokenFromChain)\n                return;\n            dispatch({ type: 'civicPass_check_token_status', token });\n        }\n        catch (error) {\n            logError(`Error getting token from chain for ${connectedWallet.publicKey}`, error);\n            dispatch({ type: 'tokenOnChainError' });\n            throw error;\n        }\n    };\n    /**\n     * Determine if we should fetch a token from chain based on the gatekeeper record state\n     */\n    (0, react_1.useEffect)(() => {\n        const shouldDispatchTokenFromChain = gatekeeperRecordState &&\n            [\n                types_1.GatekeeperRecordState.ISSUED,\n                types_1.GatekeeperRecordState.ISSUED_EXPIRED,\n                types_1.GatekeeperRecordState.ISSUED_EXPIRY_APPROACHING,\n                types_1.GatekeeperRecordState.REQUESTED,\n                types_1.GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED,\n                types_1.GatekeeperRecordState.SERVER_FAILURE,\n            ].includes(gatekeeperRecordState);\n        if (!shouldDispatchTokenFromChain)\n            return;\n        dispatchTokenFromChain();\n    }, [gatekeeperRecordState]);\n    /**\n     * Check token on chain if checking the record status is not required\n     */\n    (0, react_1.useEffect)(() => {\n        if (config.requiresGatekeeperRecordStatusCheck)\n            return;\n        dispatchTokenFromChain();\n    }, [config.requiresGatekeeperRecordStatusCheck]);\n    return {\n        addTokenChangeListeners,\n        dispatchTokenFromChain,\n    };\n};\nexports.default = useChain;\n"]},"metadata":{},"sourceType":"script"}